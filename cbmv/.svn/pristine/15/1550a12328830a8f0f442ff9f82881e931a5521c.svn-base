package com.creatorbluer.cbmv.controller;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.OutputStream;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.shiro.SecurityUtils;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.creatorbluer.cbmv.comm.RedisUtils;
import com.creatorbluer.cbmv.comm.VerifyCode;
import com.creatorbluer.cbmv.domain.Cust;
import com.creatorbluer.cbmv.domain.User;
import com.creatorbluer.cbmv.domain.Video;
import com.creatorbluer.cbmv.service.CustService;
import com.creatorbluer.cbmv.service.VideoService;
@Controller
public class IndexController {
	@Autowired
	RedisUtils ru;
	@Autowired
	CustService custservice;
	@Autowired
	VideoService videoservice;
	
	@RequestMapping("toindex")
	public ModelAndView toIndex(ModelAndView mv,Cust c,Video v) {
		Integer userId = (Integer) SecurityUtils.getSubject().getPrincipal();
		String u = (String) ru.getCacheHash("loginUsers", userId.toString());
		JSONObject js = new JSONObject(u);
		mv.setViewName("index");
		mv.addObject("loginUser", js.toMap());
		
		try {
			
			Integer list = custservice.selectCustNum(c);
			mv.addObject("custnum",list);
			int playnum = videoservice.selectSumPlay(v);
			mv.addObject("playsum",playnum);
			int likenum = videoservice.selectLikePlay(v);
			mv.addObject("likenum",likenum);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return mv;
		
	}
	
	@RequestMapping("totime")
	public ModelAndView toTime(ModelAndView mv,Integer time) {
		System.out.println(time);
		Cust c = new Cust();
		Video v = new Video();
		try {
			if(time != null) {
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");//设置日期格式
				//创建日期对象
				Date date = new Date();
				long a = date.getTime() - time*60*60*10000;
				try {
					c.setCustData(sdf.parse(sdf.format(a)));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			Integer list = custservice.selectCustNum(c);
			mv.addObject("custnum",list);
			int playnum = videoservice.selectSumPlay(v);
			mv.addObject("playsum",playnum);
			int likenum = videoservice.selectLikePlay(v);
			mv.addObject("likenum",likenum);
			
			mv.addObject("time",time);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		mv.setViewName("index");
		return mv;
		
	}
	
	
	/* 获取验证码图片 */
	@RequestMapping("/getVerifyCode")
	public void getVerificationCode(HttpSession seeion,HttpServletResponse response) {
		try {
			int width = 100;
			int height = 34;

			//生成对应宽高的初始图片
			BufferedImage verifyImg = new BufferedImage(width, height, BufferedImage.TYPE_INT_BGR);
			

			//单独的一个类方法，出于代码复用考虑，进行了封装
			//功能是生成验证码字符并加上噪点，干扰线，返回值为验证码字符 
			String randomText = VerifyCode.drawRandomText(width, height, verifyImg);
			seeion.setAttribute("verifyCode", randomText);
			response.setContentType("image/png");//必须设置响应内容类型为图片，否则前台不识别
			OutputStream os = response.getOutputStream();//获取文件输出流
			ImageIO.write(verifyImg,"png",os);
			
			os.flush();
			os.close();//关闭流
		} catch (IOException e) {
			// TODO: handle exception
			
			e.printStackTrace();
		}
	}
	
	
	
}
